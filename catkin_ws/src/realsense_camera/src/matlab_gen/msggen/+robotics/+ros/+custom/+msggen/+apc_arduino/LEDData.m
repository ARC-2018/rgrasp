classdef LEDData < robotics.ros.Message
    %LEDData MATLAB implementation of apc_arduino/LEDData
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'apc_arduino/LEDData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ba9ff9e389f7dfbf1058b1ca85db6aeb' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        LED0
        LED1
        LED2
        LED3
    end
    
    properties (Constant, Hidden)
        PropertyList = {'LED0', 'LED1', 'LED2', 'LED3'} % List of non-constant message properties
        ROSPropertyList = {'LED0', 'LED1', 'LED2', 'LED3'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = LEDData(msg)
            %LEDData Construct the message object LEDData
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function led0 = get.LED0(obj)
            %get.LED0 Get the value for property LED0
            led0 = typecast(int16(obj.JavaMessage.getLED0), 'uint16');
        end
        
        function set.LED0(obj, led0)
            %set.LED0 Set the value for property LED0
            validateattributes(led0, {'numeric'}, {'nonempty', 'scalar'}, 'LEDData', 'LED0');
            
            obj.JavaMessage.setLED0(led0);
        end
        
        function led1 = get.LED1(obj)
            %get.LED1 Get the value for property LED1
            led1 = typecast(int16(obj.JavaMessage.getLED1), 'uint16');
        end
        
        function set.LED1(obj, led1)
            %set.LED1 Set the value for property LED1
            validateattributes(led1, {'numeric'}, {'nonempty', 'scalar'}, 'LEDData', 'LED1');
            
            obj.JavaMessage.setLED1(led1);
        end
        
        function led2 = get.LED2(obj)
            %get.LED2 Get the value for property LED2
            led2 = typecast(int16(obj.JavaMessage.getLED2), 'uint16');
        end
        
        function set.LED2(obj, led2)
            %set.LED2 Set the value for property LED2
            validateattributes(led2, {'numeric'}, {'nonempty', 'scalar'}, 'LEDData', 'LED2');
            
            obj.JavaMessage.setLED2(led2);
        end
        
        function led3 = get.LED3(obj)
            %get.LED3 Get the value for property LED3
            led3 = typecast(int16(obj.JavaMessage.getLED3), 'uint16');
        end
        
        function set.LED3(obj, led3)
            %set.LED3 Set the value for property LED3
            validateattributes(led3, {'numeric'}, {'nonempty', 'scalar'}, 'LEDData', 'LED3');
            
            obj.JavaMessage.setLED3(led3);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.LED0 = obj.LED0;
            cpObj.LED1 = obj.LED1;
            cpObj.LED2 = obj.LED2;
            cpObj.LED3 = obj.LED3;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.LED0 = strObj.LED0;
            obj.LED1 = strObj.LED1;
            obj.LED2 = strObj.LED2;
            obj.LED3 = strObj.LED3;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.LED0 = obj.LED0;
            strObj.LED1 = obj.LED1;
            strObj.LED2 = obj.LED2;
            strObj.LED3 = obj.LED3;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.apc_arduino.LEDData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.apc_arduino.LEDData;
            obj.reload(strObj);
        end
    end
end
