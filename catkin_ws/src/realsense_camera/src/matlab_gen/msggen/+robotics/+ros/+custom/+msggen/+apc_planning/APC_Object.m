classdef APC_Object < robotics.ros.Message
    %APC_Object MATLAB implementation of apc_planning/APC_Object
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'apc_planning/APC_Object' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '29313d27150a3728cad3db512b148d76' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        ObjId
        BinId
        Score
        Position
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BinId', 'ObjId', 'Position', 'Score'} % List of non-constant message properties
        ROSPropertyList = {'binId', 'ObjId', 'position', 'score'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = APC_Object(msg)
            %APC_Object Construct the message object APC_Object
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function objid = get.ObjId(obj)
            %get.ObjId Get the value for property ObjId
            objid = char(obj.JavaMessage.getObjId);
        end
        
        function set.ObjId(obj, objid)
            %set.ObjId Set the value for property ObjId
            validateattributes(objid, {'char'}, {}, 'APC_Object', 'ObjId');
            
            obj.JavaMessage.setObjId(objid);
        end
        
        function binid = get.BinId(obj)
            %get.BinId Get the value for property BinId
            binid = int64(obj.JavaMessage.getBinId);
        end
        
        function set.BinId(obj, binid)
            %set.BinId Set the value for property BinId
            validateattributes(binid, {'numeric'}, {'nonempty', 'scalar'}, 'APC_Object', 'BinId');
            
            obj.JavaMessage.setBinId(binid);
        end
        
        function score = get.Score(obj)
            %get.Score Get the value for property Score
            score = double(obj.JavaMessage.getScore);
        end
        
        function set.Score(obj, score)
            %set.Score Set the value for property Score
            validateattributes(score, {'numeric'}, {'nonempty', 'scalar'}, 'APC_Object', 'Score');
            
            obj.JavaMessage.setScore(score);
        end
        
        function position = get.Position(obj)
            %get.Position Get the value for property Position
            javaArray = obj.JavaMessage.getPosition;
            array = obj.readJavaArray(javaArray, 'double');
            position = double(array);
        end
        
        function set.Position(obj, position)
            %set.Position Set the value for property Position
            if ~isvector(position) && isempty(position)
                % Allow empty [] input
                position = double.empty(0,1);
            end
            
            validateattributes(position, {'numeric'}, {'vector'}, 'APC_Object', 'Position');
            
            javaArray = obj.JavaMessage.getPosition;
            array = obj.writeJavaArray(position, javaArray, 'double');
            obj.JavaMessage.setPosition(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ObjId = obj.ObjId;
            cpObj.BinId = obj.BinId;
            cpObj.Score = obj.Score;
            cpObj.Position = obj.Position;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ObjId = strObj.ObjId;
            obj.BinId = strObj.BinId;
            obj.Score = strObj.Score;
            obj.Position = strObj.Position;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ObjId = obj.ObjId;
            strObj.BinId = obj.BinId;
            strObj.Score = obj.Score;
            strObj.Position = obj.Position;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.apc_planning.APC_Object.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.apc_planning.APC_Object;
            obj.reload(strObj);
        end
    end
end
