classdef ObjectPose < robotics.ros.Message
    %ObjectPose MATLAB implementation of pr_msgs/ObjectPose
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'pr_msgs/ObjectPose' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '2ed0d3dd1a0ec7eac29af61880cd83c3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
        PrMsgsNameTypeValueClass = robotics.ros.msg.internal.MessageFactory.getClassForType('pr_msgs/NameTypeValue') % Dispatch to MATLAB class for message type pr_msgs/NameTypeValue
    end
    
    properties (Dependent)
        Name
        Pose
        MeanQuality
        UsedPoints
        ConvexHullX
        ConvexHullY
        Properties
        PoseUncertaintyList
    end
    
    properties (Access = protected)
        Cache = struct('Pose', [], 'Properties', [], 'PoseUncertaintyList', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ConvexHullX', 'ConvexHullY', 'MeanQuality', 'Name', 'Pose', 'PoseUncertaintyList', 'Properties', 'UsedPoints'} % List of non-constant message properties
        ROSPropertyList = {'convex_hull_x', 'convex_hull_y', 'mean_quality', 'name', 'pose', 'pose_uncertainty_list', 'properties', 'used_points'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ObjectPose(msg)
            %ObjectPose Construct the message object ObjectPose
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            name = char(obj.JavaMessage.getName);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            validateattributes(name, {'char'}, {}, 'ObjectPose', 'Name');
            
            obj.JavaMessage.setName(name);
        end
        
        function pose = get.Pose(obj)
            %get.Pose Get the value for property Pose
            if isempty(obj.Cache.Pose)
                obj.Cache.Pose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getPose);
            end
            pose = obj.Cache.Pose;
        end
        
        function set.Pose(obj, pose)
            %set.Pose Set the value for property Pose
            validateattributes(pose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'ObjectPose', 'Pose');
            
            obj.JavaMessage.setPose(pose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Pose)
                obj.Cache.Pose.setJavaObject(pose.getJavaObject);
            end
        end
        
        function meanquality = get.MeanQuality(obj)
            %get.MeanQuality Get the value for property MeanQuality
            meanquality = single(obj.JavaMessage.getMeanQuality);
        end
        
        function set.MeanQuality(obj, meanquality)
            %set.MeanQuality Set the value for property MeanQuality
            validateattributes(meanquality, {'numeric'}, {'nonempty', 'scalar'}, 'ObjectPose', 'MeanQuality');
            
            obj.JavaMessage.setMeanQuality(meanquality);
        end
        
        function usedpoints = get.UsedPoints(obj)
            %get.UsedPoints Get the value for property UsedPoints
            usedpoints = int16(obj.JavaMessage.getUsedPoints);
        end
        
        function set.UsedPoints(obj, usedpoints)
            %set.UsedPoints Set the value for property UsedPoints
            validateattributes(usedpoints, {'numeric'}, {'nonempty', 'scalar'}, 'ObjectPose', 'UsedPoints');
            
            obj.JavaMessage.setUsedPoints(usedpoints);
        end
        
        function convexhullx = get.ConvexHullX(obj)
            %get.ConvexHullX Get the value for property ConvexHullX
            javaArray = obj.JavaMessage.getConvexHullX;
            array = obj.readJavaArray(javaArray, 'int16');
            convexhullx = int16(array);
        end
        
        function set.ConvexHullX(obj, convexhullx)
            %set.ConvexHullX Set the value for property ConvexHullX
            if ~isvector(convexhullx) && isempty(convexhullx)
                % Allow empty [] input
                convexhullx = int16.empty(0,1);
            end
            
            validateattributes(convexhullx, {'numeric'}, {'vector'}, 'ObjectPose', 'ConvexHullX');
            
            javaArray = obj.JavaMessage.getConvexHullX;
            array = obj.writeJavaArray(convexhullx, javaArray, 'int16');
            obj.JavaMessage.setConvexHullX(array);
        end
        
        function convexhully = get.ConvexHullY(obj)
            %get.ConvexHullY Get the value for property ConvexHullY
            javaArray = obj.JavaMessage.getConvexHullY;
            array = obj.readJavaArray(javaArray, 'int16');
            convexhully = int16(array);
        end
        
        function set.ConvexHullY(obj, convexhully)
            %set.ConvexHullY Set the value for property ConvexHullY
            if ~isvector(convexhully) && isempty(convexhully)
                % Allow empty [] input
                convexhully = int16.empty(0,1);
            end
            
            validateattributes(convexhully, {'numeric'}, {'vector'}, 'ObjectPose', 'ConvexHullY');
            
            javaArray = obj.JavaMessage.getConvexHullY;
            array = obj.writeJavaArray(convexhully, javaArray, 'int16');
            obj.JavaMessage.setConvexHullY(array);
        end
        
        function properties_ = get.Properties(obj)
            %get.Properties Get the value for property Properties
            if isempty(obj.Cache.Properties)
                javaArray = obj.JavaMessage.getProperties;
                array = obj.readJavaArray(javaArray, obj.PrMsgsNameTypeValueClass);
                obj.Cache.Properties = feval(obj.PrMsgsNameTypeValueClass, array);
            end
            properties_ = obj.Cache.Properties;
        end
        
        function set.Properties(obj, properties_)
            %set.Properties Set the value for property Properties
            if ~isvector(properties_) && isempty(properties_)
                % Allow empty [] input
                properties_ = feval([obj.PrMsgsNameTypeValueClass '.empty'], 0, 1);
            end
            
            validateattributes(properties_, {obj.PrMsgsNameTypeValueClass}, {'vector'}, 'ObjectPose', 'Properties');
            
            javaArray = obj.JavaMessage.getProperties;
            array = obj.writeJavaArray(properties_, javaArray, obj.PrMsgsNameTypeValueClass);
            obj.JavaMessage.setProperties(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Properties)
                obj.Cache.Properties = [];
                obj.Cache.Properties = obj.Properties;
            end
        end
        
        function poseuncertaintylist = get.PoseUncertaintyList(obj)
            %get.PoseUncertaintyList Get the value for property PoseUncertaintyList
            if isempty(obj.Cache.PoseUncertaintyList)
                javaArray = obj.JavaMessage.getPoseUncertaintyList;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPoseClass);
                obj.Cache.PoseUncertaintyList = feval(obj.GeometryMsgsPoseClass, array);
            end
            poseuncertaintylist = obj.Cache.PoseUncertaintyList;
        end
        
        function set.PoseUncertaintyList(obj, poseuncertaintylist)
            %set.PoseUncertaintyList Set the value for property PoseUncertaintyList
            if ~isvector(poseuncertaintylist) && isempty(poseuncertaintylist)
                % Allow empty [] input
                poseuncertaintylist = feval([obj.GeometryMsgsPoseClass '.empty'], 0, 1);
            end
            
            validateattributes(poseuncertaintylist, {obj.GeometryMsgsPoseClass}, {'vector'}, 'ObjectPose', 'PoseUncertaintyList');
            
            javaArray = obj.JavaMessage.getPoseUncertaintyList;
            array = obj.writeJavaArray(poseuncertaintylist, javaArray, obj.GeometryMsgsPoseClass);
            obj.JavaMessage.setPoseUncertaintyList(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PoseUncertaintyList)
                obj.Cache.PoseUncertaintyList = [];
                obj.Cache.PoseUncertaintyList = obj.PoseUncertaintyList;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Pose = [];
            obj.Cache.Properties = [];
            obj.Cache.PoseUncertaintyList = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Name = obj.Name;
            cpObj.MeanQuality = obj.MeanQuality;
            cpObj.UsedPoints = obj.UsedPoints;
            cpObj.ConvexHullX = obj.ConvexHullX;
            cpObj.ConvexHullY = obj.ConvexHullY;
            
            % Recursively copy compound properties
            cpObj.Pose = copy(obj.Pose);
            cpObj.Properties = copy(obj.Properties);
            cpObj.PoseUncertaintyList = copy(obj.PoseUncertaintyList);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Name = strObj.Name;
            obj.MeanQuality = strObj.MeanQuality;
            obj.UsedPoints = strObj.UsedPoints;
            obj.ConvexHullX = strObj.ConvexHullX;
            obj.ConvexHullY = strObj.ConvexHullY;
            obj.Pose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.Pose);
            PropertiesCell = arrayfun(@(x) feval([obj.PrMsgsNameTypeValueClass '.loadobj'], x), strObj.Properties, 'UniformOutput', false);
            obj.Properties = vertcat(PropertiesCell{:});
            PoseUncertaintyListCell = arrayfun(@(x) feval([obj.GeometryMsgsPoseClass '.loadobj'], x), strObj.PoseUncertaintyList, 'UniformOutput', false);
            obj.PoseUncertaintyList = vertcat(PoseUncertaintyListCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Name = obj.Name;
            strObj.MeanQuality = obj.MeanQuality;
            strObj.UsedPoints = obj.UsedPoints;
            strObj.ConvexHullX = obj.ConvexHullX;
            strObj.ConvexHullY = obj.ConvexHullY;
            strObj.Pose = saveobj(obj.Pose);
            strObj.Properties = arrayfun(@(x) saveobj(x), obj.Properties);
            strObj.PoseUncertaintyList = arrayfun(@(x) saveobj(x), obj.PoseUncertaintyList);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.pr_msgs.ObjectPose.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.pr_msgs.ObjectPose;
            obj.reload(strObj);
        end
    end
end
