classdef StrainGaugeData < robotics.ros.Message
    %StrainGaugeData MATLAB implementation of apc_arduino/StrainGaugeData
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'apc_arduino/StrainGaugeData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c2a6f59ffa4a2798ea4a36fc6f94a382' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Strain0
        Level0
        Strain1
        Level1
        Strain2
        Level2
        Strain3
        Level3
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Level0', 'Level1', 'Level2', 'Level3', 'Strain0', 'Strain1', 'Strain2', 'Strain3'} % List of non-constant message properties
        ROSPropertyList = {'level0', 'level1', 'level2', 'level3', 'strain0', 'strain1', 'strain2', 'strain3'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = StrainGaugeData(msg)
            %StrainGaugeData Construct the message object StrainGaugeData
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function strain0 = get.Strain0(obj)
            %get.Strain0 Get the value for property Strain0
            strain0 = int16(obj.JavaMessage.getStrain0);
        end
        
        function set.Strain0(obj, strain0)
            %set.Strain0 Set the value for property Strain0
            validateattributes(strain0, {'numeric'}, {'nonempty', 'scalar'}, 'StrainGaugeData', 'Strain0');
            
            obj.JavaMessage.setStrain0(strain0);
        end
        
        function level0 = get.Level0(obj)
            %get.Level0 Get the value for property Level0
            level0 = typecast(int8(obj.JavaMessage.getLevel0), 'uint8');
        end
        
        function set.Level0(obj, level0)
            %set.Level0 Set the value for property Level0
            validateattributes(level0, {'numeric'}, {'nonempty', 'scalar'}, 'StrainGaugeData', 'Level0');
            
            obj.JavaMessage.setLevel0(level0);
        end
        
        function strain1 = get.Strain1(obj)
            %get.Strain1 Get the value for property Strain1
            strain1 = int16(obj.JavaMessage.getStrain1);
        end
        
        function set.Strain1(obj, strain1)
            %set.Strain1 Set the value for property Strain1
            validateattributes(strain1, {'numeric'}, {'nonempty', 'scalar'}, 'StrainGaugeData', 'Strain1');
            
            obj.JavaMessage.setStrain1(strain1);
        end
        
        function level1 = get.Level1(obj)
            %get.Level1 Get the value for property Level1
            level1 = typecast(int8(obj.JavaMessage.getLevel1), 'uint8');
        end
        
        function set.Level1(obj, level1)
            %set.Level1 Set the value for property Level1
            validateattributes(level1, {'numeric'}, {'nonempty', 'scalar'}, 'StrainGaugeData', 'Level1');
            
            obj.JavaMessage.setLevel1(level1);
        end
        
        function strain2 = get.Strain2(obj)
            %get.Strain2 Get the value for property Strain2
            strain2 = int16(obj.JavaMessage.getStrain2);
        end
        
        function set.Strain2(obj, strain2)
            %set.Strain2 Set the value for property Strain2
            validateattributes(strain2, {'numeric'}, {'nonempty', 'scalar'}, 'StrainGaugeData', 'Strain2');
            
            obj.JavaMessage.setStrain2(strain2);
        end
        
        function level2 = get.Level2(obj)
            %get.Level2 Get the value for property Level2
            level2 = typecast(int8(obj.JavaMessage.getLevel2), 'uint8');
        end
        
        function set.Level2(obj, level2)
            %set.Level2 Set the value for property Level2
            validateattributes(level2, {'numeric'}, {'nonempty', 'scalar'}, 'StrainGaugeData', 'Level2');
            
            obj.JavaMessage.setLevel2(level2);
        end
        
        function strain3 = get.Strain3(obj)
            %get.Strain3 Get the value for property Strain3
            strain3 = int16(obj.JavaMessage.getStrain3);
        end
        
        function set.Strain3(obj, strain3)
            %set.Strain3 Set the value for property Strain3
            validateattributes(strain3, {'numeric'}, {'nonempty', 'scalar'}, 'StrainGaugeData', 'Strain3');
            
            obj.JavaMessage.setStrain3(strain3);
        end
        
        function level3 = get.Level3(obj)
            %get.Level3 Get the value for property Level3
            level3 = typecast(int8(obj.JavaMessage.getLevel3), 'uint8');
        end
        
        function set.Level3(obj, level3)
            %set.Level3 Set the value for property Level3
            validateattributes(level3, {'numeric'}, {'nonempty', 'scalar'}, 'StrainGaugeData', 'Level3');
            
            obj.JavaMessage.setLevel3(level3);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Strain0 = obj.Strain0;
            cpObj.Level0 = obj.Level0;
            cpObj.Strain1 = obj.Strain1;
            cpObj.Level1 = obj.Level1;
            cpObj.Strain2 = obj.Strain2;
            cpObj.Level2 = obj.Level2;
            cpObj.Strain3 = obj.Strain3;
            cpObj.Level3 = obj.Level3;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Strain0 = strObj.Strain0;
            obj.Level0 = strObj.Level0;
            obj.Strain1 = strObj.Strain1;
            obj.Level1 = strObj.Level1;
            obj.Strain2 = strObj.Strain2;
            obj.Level2 = strObj.Level2;
            obj.Strain3 = strObj.Strain3;
            obj.Level3 = strObj.Level3;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Strain0 = obj.Strain0;
            strObj.Level0 = obj.Level0;
            strObj.Strain1 = obj.Strain1;
            strObj.Level1 = obj.Level1;
            strObj.Strain2 = obj.Strain2;
            strObj.Level2 = obj.Level2;
            strObj.Strain3 = obj.Strain3;
            strObj.Level3 = obj.Level3;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.apc_arduino.StrainGaugeData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.apc_arduino.StrainGaugeData;
            obj.reload(strObj);
        end
    end
end
