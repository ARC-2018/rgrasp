classdef Adc < robotics.ros.Message
    %Adc MATLAB implementation of apc_arduino/Adc
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'apc_arduino/Adc' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6d7853a614e2e821319068311f2af25b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Adc0
        Adc1
        Adc2
        Adc3
        Adc4
        Adc5
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Adc0', 'Adc1', 'Adc2', 'Adc3', 'Adc4', 'Adc5'} % List of non-constant message properties
        ROSPropertyList = {'adc0', 'adc1', 'adc2', 'adc3', 'adc4', 'adc5'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Adc(msg)
            %Adc Construct the message object Adc
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function adc0 = get.Adc0(obj)
            %get.Adc0 Get the value for property Adc0
            adc0 = typecast(int16(obj.JavaMessage.getAdc0), 'uint16');
        end
        
        function set.Adc0(obj, adc0)
            %set.Adc0 Set the value for property Adc0
            validateattributes(adc0, {'numeric'}, {'nonempty', 'scalar'}, 'Adc', 'Adc0');
            
            obj.JavaMessage.setAdc0(adc0);
        end
        
        function adc1 = get.Adc1(obj)
            %get.Adc1 Get the value for property Adc1
            adc1 = typecast(int16(obj.JavaMessage.getAdc1), 'uint16');
        end
        
        function set.Adc1(obj, adc1)
            %set.Adc1 Set the value for property Adc1
            validateattributes(adc1, {'numeric'}, {'nonempty', 'scalar'}, 'Adc', 'Adc1');
            
            obj.JavaMessage.setAdc1(adc1);
        end
        
        function adc2 = get.Adc2(obj)
            %get.Adc2 Get the value for property Adc2
            adc2 = typecast(int16(obj.JavaMessage.getAdc2), 'uint16');
        end
        
        function set.Adc2(obj, adc2)
            %set.Adc2 Set the value for property Adc2
            validateattributes(adc2, {'numeric'}, {'nonempty', 'scalar'}, 'Adc', 'Adc2');
            
            obj.JavaMessage.setAdc2(adc2);
        end
        
        function adc3 = get.Adc3(obj)
            %get.Adc3 Get the value for property Adc3
            adc3 = typecast(int16(obj.JavaMessage.getAdc3), 'uint16');
        end
        
        function set.Adc3(obj, adc3)
            %set.Adc3 Set the value for property Adc3
            validateattributes(adc3, {'numeric'}, {'nonempty', 'scalar'}, 'Adc', 'Adc3');
            
            obj.JavaMessage.setAdc3(adc3);
        end
        
        function adc4 = get.Adc4(obj)
            %get.Adc4 Get the value for property Adc4
            adc4 = typecast(int16(obj.JavaMessage.getAdc4), 'uint16');
        end
        
        function set.Adc4(obj, adc4)
            %set.Adc4 Set the value for property Adc4
            validateattributes(adc4, {'numeric'}, {'nonempty', 'scalar'}, 'Adc', 'Adc4');
            
            obj.JavaMessage.setAdc4(adc4);
        end
        
        function adc5 = get.Adc5(obj)
            %get.Adc5 Get the value for property Adc5
            adc5 = typecast(int16(obj.JavaMessage.getAdc5), 'uint16');
        end
        
        function set.Adc5(obj, adc5)
            %set.Adc5 Set the value for property Adc5
            validateattributes(adc5, {'numeric'}, {'nonempty', 'scalar'}, 'Adc', 'Adc5');
            
            obj.JavaMessage.setAdc5(adc5);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Adc0 = obj.Adc0;
            cpObj.Adc1 = obj.Adc1;
            cpObj.Adc2 = obj.Adc2;
            cpObj.Adc3 = obj.Adc3;
            cpObj.Adc4 = obj.Adc4;
            cpObj.Adc5 = obj.Adc5;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Adc0 = strObj.Adc0;
            obj.Adc1 = strObj.Adc1;
            obj.Adc2 = strObj.Adc2;
            obj.Adc3 = strObj.Adc3;
            obj.Adc4 = strObj.Adc4;
            obj.Adc5 = strObj.Adc5;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Adc0 = obj.Adc0;
            strObj.Adc1 = obj.Adc1;
            strObj.Adc2 = obj.Adc2;
            strObj.Adc3 = obj.Adc3;
            strObj.Adc4 = obj.Adc4;
            strObj.Adc5 = obj.Adc5;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.apc_arduino.Adc.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.apc_arduino.Adc;
            obj.reload(strObj);
        end
    end
end
