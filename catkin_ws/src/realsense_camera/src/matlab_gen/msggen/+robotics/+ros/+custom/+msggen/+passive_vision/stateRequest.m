classdef stateRequest < robotics.ros.Message
    %stateRequest MATLAB implementation of passive_vision/stateRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'passive_vision/stateRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '32a49b4bb9e21e3094f43df46bd942a3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        AbsentObjects
        CameraList
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AbsentObjects', 'CameraList'} % List of non-constant message properties
        ROSPropertyList = {'absent_objects', 'camera_list'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = stateRequest(msg)
            %stateRequest Construct the message object stateRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function absentobjects = get.AbsentObjects(obj)
            %get.AbsentObjects Get the value for property AbsentObjects
            javaArray = obj.JavaMessage.getAbsentObjects;
            array = obj.readJavaArray(javaArray, 'char');
            absentobjects = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.AbsentObjects(obj, absentobjects)
            %set.AbsentObjects Set the value for property AbsentObjects
            if ~isvector(absentobjects) && isempty(absentobjects)
                % Allow empty [] input
                absentobjects = cell.empty(0,1);
            end
            
            validateattributes(absentobjects, {'cell'}, {'vector'}, 'stateRequest', 'AbsentObjects');
            if any(cellfun(@(x) ~ischar(x), absentobjects))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'absentobjects'));
            end
            
            javaArray = obj.JavaMessage.getAbsentObjects;
            array = obj.writeJavaArray(absentobjects, javaArray, 'char');
            obj.JavaMessage.setAbsentObjects(array);
        end
        
        function cameralist = get.CameraList(obj)
            %get.CameraList Get the value for property CameraList
            javaArray = obj.JavaMessage.getCameraList;
            array = obj.readJavaArray(javaArray, 'char');
            cameralist = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.CameraList(obj, cameralist)
            %set.CameraList Set the value for property CameraList
            if ~isvector(cameralist) && isempty(cameralist)
                % Allow empty [] input
                cameralist = cell.empty(0,1);
            end
            
            validateattributes(cameralist, {'cell'}, {'vector'}, 'stateRequest', 'CameraList');
            if any(cellfun(@(x) ~ischar(x), cameralist))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'cameralist'));
            end
            
            javaArray = obj.JavaMessage.getCameraList;
            array = obj.writeJavaArray(cameralist, javaArray, 'char');
            obj.JavaMessage.setCameraList(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.AbsentObjects = obj.AbsentObjects;
            cpObj.CameraList = obj.CameraList;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.AbsentObjects = strObj.AbsentObjects;
            obj.CameraList = strObj.CameraList;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.AbsentObjects = obj.AbsentObjects;
            strObj.CameraList = obj.CameraList;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.passive_vision.stateRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.passive_vision.stateRequest;
            obj.reload(strObj);
        end
    end
end
