classdef Spatula_Position < robotics.ros.Message
    %Spatula_Position MATLAB implementation of apc_arduino/Spatula_Position
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'apc_arduino/Spatula_Position' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'cdd45f2dabb9b9a191ebffff44325608' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Sp1
        Sp2
        Sp1Moving
        Sp2Moving
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Sp1', 'Sp1Moving', 'Sp2', 'Sp2Moving'} % List of non-constant message properties
        ROSPropertyList = {'Sp1', 'Sp1_moving', 'Sp2', 'Sp2_moving'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Spatula_Position(msg)
            %Spatula_Position Construct the message object Spatula_Position
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function sp1 = get.Sp1(obj)
            %get.Sp1 Get the value for property Sp1
            sp1 = int32(obj.JavaMessage.getSp1);
        end
        
        function set.Sp1(obj, sp1)
            %set.Sp1 Set the value for property Sp1
            validateattributes(sp1, {'numeric'}, {'nonempty', 'scalar'}, 'Spatula_Position', 'Sp1');
            
            obj.JavaMessage.setSp1(sp1);
        end
        
        function sp2 = get.Sp2(obj)
            %get.Sp2 Get the value for property Sp2
            sp2 = int32(obj.JavaMessage.getSp2);
        end
        
        function set.Sp2(obj, sp2)
            %set.Sp2 Set the value for property Sp2
            validateattributes(sp2, {'numeric'}, {'nonempty', 'scalar'}, 'Spatula_Position', 'Sp2');
            
            obj.JavaMessage.setSp2(sp2);
        end
        
        function sp1moving = get.Sp1Moving(obj)
            %get.Sp1Moving Get the value for property Sp1Moving
            sp1moving = logical(obj.JavaMessage.getSp1Moving);
        end
        
        function set.Sp1Moving(obj, sp1moving)
            %set.Sp1Moving Set the value for property Sp1Moving
            validateattributes(sp1moving, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Spatula_Position', 'Sp1Moving');
            
            obj.JavaMessage.setSp1Moving(sp1moving);
        end
        
        function sp2moving = get.Sp2Moving(obj)
            %get.Sp2Moving Get the value for property Sp2Moving
            sp2moving = logical(obj.JavaMessage.getSp2Moving);
        end
        
        function set.Sp2Moving(obj, sp2moving)
            %set.Sp2Moving Set the value for property Sp2Moving
            validateattributes(sp2moving, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Spatula_Position', 'Sp2Moving');
            
            obj.JavaMessage.setSp2Moving(sp2moving);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Sp1 = obj.Sp1;
            cpObj.Sp2 = obj.Sp2;
            cpObj.Sp1Moving = obj.Sp1Moving;
            cpObj.Sp2Moving = obj.Sp2Moving;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Sp1 = strObj.Sp1;
            obj.Sp2 = strObj.Sp2;
            obj.Sp1Moving = strObj.Sp1Moving;
            obj.Sp2Moving = strObj.Sp2Moving;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Sp1 = obj.Sp1;
            strObj.Sp2 = obj.Sp2;
            strObj.Sp1Moving = obj.Sp1Moving;
            strObj.Sp2Moving = obj.Sp2Moving;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.apc_arduino.Spatula_Position.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.apc_arduino.Spatula_Position;
            obj.reload(strObj);
        end
    end
end
